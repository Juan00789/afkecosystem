
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is an admin
    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Users: Can read anyone's public profile, but can only write to their own.
    match /users/{userId} {
      allow read: if request.auth != null;
      // Allow user to write to their own doc.
      // Allow admin to update any user's credits (for rewards, etc).
      allow write: if request.auth.uid == userId;
      allow update: if isAdmin() && request.resource.data.keys().hasAll(['credits']);
    }

    // Services: Anyone can read, but only the provider can create/update/delete.
    match /services/{serviceId} {
      allow read: if request.auth != null;
      allow write: if request.auth.uid == request.resource.data.providerId;
    }
    
    // Products: Anyone can read, but only the provider can create/update/delete.
    match /products/{productId} {
      allow read: if request.auth != null;
      allow write: if request.auth.uid == request.resource.data.providerId;
    }
    
    // Cases: Only participants can read/write.
    match /cases/{caseId} {
      allow read, update: if request.auth.uid == resource.data.clientId || request.auth.uid == resource.data.providerId || isAdmin();
      allow create: if request.auth.uid == request.resource.data.clientId;
      
      // Comments within cases
      match /comments/{commentId} {
        allow read: if request.auth.uid == get(/databases/$(database)/documents/cases/$(caseId)).data.clientId || request.auth.uid == get(/databases/$(database)/documents/cases/$(caseId)).data.providerId || isAdmin();
        allow create: if request.auth.uid == request.resource.data.authorId;
      }
    }

    // Invoices: Only the provider can create and read their own invoices.
    match /invoices/{invoiceId} {
        allow read, write: if request.auth.uid == resource.data.providerId;
        allow create: if request.auth.uid == request.resource.data.providerId;
    }

    // Transactions: Users can only manage their own transactions.
    match /transactions/{transactionId} {
        allow read, write: if request.auth.uid == resource.data.userId;
        allow create: if request.auth.uid == request.resource.data.userId;
    }
    
    // Network Connections: Users can create connections, and only participants can delete them.
    match /network_connections/{connectionId} {
        allow create: if request.auth.uid == request.resource.data.client_id || request.auth.uid == request.resource.data.provider_id;
        allow read: if request.auth.uid == resource.data.client_id || request.auth.uid == resource.data.provider_id;
        allow delete: if request.auth.uid == resource.data.client_id || request.auth.uid == resource.data.provider_id;
    }

    // Courses: Any authenticated user can read. Only admins or specified providers can write.
    match /courses/{courseId} {
      allow read: if request.auth != null;
      // Allow create/update if user is the provider of the course
      allow write: if request.auth.uid == request.resource.data.providerId || isAdmin();
    }
    
    // Credit Requests: Users can create/read their own. Admins can read/update all.
    match /credit_requests/{requestId} {
      allow create: if request.auth.uid == request.resource.data.userId;
      allow read: if request.auth.uid == resource.data.userId || isAdmin();
      allow update: if isAdmin(); // Admins can update status
    }
    
    // Loans: Users can read their own. Admins can create/read/update all.
    match /loans/{loanId} {
       allow read: if request.auth.uid == resource.data.userId || isAdmin();
       allow create, update: if isAdmin();
    }
    
    // P2P Transactions: Only involved parties should interact with this if needed.
    match /p2p_transactions/{transactionId} {
      allow read: if request.auth.uid == resource.data.senderUid || request.auth.uid == resource.data.recipientUid;
      // Generally, these should not be created directly by clients, but through a function.
      // This rule assumes creation happens via a trusted server/function environment.
      allow create: if request.auth != null;
    }
    
    // Investments: Users can create. Read access might be wider depending on rules.
    match /investments/{investmentId} {
      allow create: if request.auth.uid == request.resource.data.investorId;
      // Any authenticated user can see investments on a case.
      allow read: if request.auth != null;
    }

    // Fund: Only admins can manage the fund.
    match /fund/{fundId} {
        allow read: if request.auth != null && isAdmin();
        allow write: if request.auth != null && isAdmin();
    }
  }
}

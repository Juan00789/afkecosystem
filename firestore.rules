rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if the user is the owner of a document
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // Users can read any profile, but only write to their own profile.
    // They can modify their own network lists.
    match /users/{userId} {
      allow read: if true;
      allow create: if isOwner(userId);
      // Allow updates to own profile, including network changes.
      // The logic for adding users to the network and awarding credits is handled
      // in a client-side transaction, which these rules permit.
      allow update: if isOwner(userId);
    }
    
    // Services are public to read for the marketplace, but only the provider can manage them.
    match /services/{serviceId} {
      allow read: if true;
      allow create: if isAuthenticated() && request.resource.data.providerId == request.auth.uid;
      allow update, delete: if isAuthenticated() && isOwner(resource.data.providerId);
    }

    // Cases can only be accessed by the client or the provider involved.
    match /cases/{caseId} {
      allow read, update: if isAuthenticated() && (isOwner(resource.data.clientId) || isOwner(resource.data.providerId));
      allow create: if isAuthenticated() && isOwner(request.resource.data.clientId);
      
      // Comments follow the same rule as the parent case.
      match /comments/{commentId} {
        allow read, create: if isAuthenticated() && (
          isOwner(get(/databases/$(database)/documents/cases/$(caseId)).data.clientId) || 
          isOwner(get(/databases/$(database)/documents/cases/$(caseId)).data.providerId)
        );
      }
    }
    
    // Credit requests can only be read/created by the user who created them (and admins in the future).
    match /credit_requests/{requestId} {
      allow read: if isAuthenticated() && isOwner(resource.data.userId);
      allow create: if isAuthenticated() && isOwner(request.resource.data.userId);
    }
    
    // Courses are public to read, but only the provider can manage them.
    match /courses/{courseId} {
       allow read: if true;
       allow create: if isAuthenticated() && isOwner(request.resource.data.providerId);
       allow update, delete: if isAuthenticated() && isOwner(resource.data.providerId);
    }
  }
}
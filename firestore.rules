rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // UTILITY: Get user role
    function getRole(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data.activeRole;
    }

    // Users can read their own profile and authenticated users can get basic info of others
    match /users/{userId} {
      allow get: if request.auth != null;
      allow list, update, delete: if request.auth.uid == userId;
      allow create: if request.auth.uid == userId;
      
      // Clients can manage their list of providers
      match /providers/{providerId} {
        allow read, write: if request.auth.uid == userId;
      }
    }

    // Providers can manage their own clients
    match /clients/{clientId} {
      allow read, write: if request.auth.uid == resource.data.userId;
    }

    // Providers can manage their own services
    match /services/{serviceId} {
      allow read: if request.auth != null;
      allow write: if request.auth.uid == resource.data.userId;
    }
    
    // Cases can be created by clients, and read/updated by either client or provider
    match /cases/{caseId} {
      allow create: if getRole(request.auth.uid) == 'client' && request.resource.data.clientId == request.auth.uid;
      allow read, update: if request.auth.uid == resource.data.clientId || request.auth.uid == resource.data.providerId;
      
      // Comments can be added by either party and read by either party
      match /comments/{commentId} {
        allow read, create: if request.auth.uid == get(/databases/$(database)/documents/cases/$(caseId)).data.clientId || request.auth.uid == get(/databases/$(database)/documents/cases/$(caseId)).data.providerId;
      }
    }
    
    // Invoices can be managed by the provider and read by the client
    match /invoices/{invoiceId} {
       allow create: if getRole(request.auth.uid) == 'provider' && request.resource.data.providerId == request.auth.uid;
       allow read: if request.auth.uid == resource.data.clientId || request.auth.uid == resource.data.providerId;
       allow update: if request.auth.uid == resource.data.providerId;
    }

  }
}


rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Users can only read and write their own profile
    match /users/{userId} {
      allow read; 
      allow write: if request.auth != null && request.auth.uid == userId;
    }

    // Services: Publicly readable, but only owner can write
    match /services/{serviceId} {
      allow read;
      allow create, update, delete: if request.auth != null && request.resource.data.providerId == request.auth.uid;
    }

    // Products: Publicly readable, but only owner can write
    match /products/{productId} {
      allow read;
      allow create, update, delete: if request.auth != null && request.resource.data.providerId == request.auth.uid;
    }

    // Courses: Publicly readable, but only owner can write
    match /courses/{courseId} {
      allow read;
      allow create, update, delete: if request.auth != null && request.resource.data.providerId == request.auth.uid;
    }
    
    // Cases: Only participants can read/write full details.
    match /cases/{caseId} {
      allow list: if request.auth != null;
      allow get: if request.auth != null && (request.auth.uid == resource.data.clientId || request.auth.uid == resource.data.providerId);
      allow create: if request.auth != null;
      allow update: if request.auth != null && (request.auth.uid == resource.data.clientId || request.auth.uid == resource.data.providerId);
      
      // Comments: Only case participants can read/write comments.
      match /comments/{commentId} {
        allow read, create: if request.auth != null && (request.auth.uid == get(/databases/$(database)/documents/cases/$(caseId)).data.clientId || request.auth.uid == get(/databases/$(database)/documents/cases/$(caseId)).data.providerId);
      }
    }
    
    // Transactions: User-specific, only owner can manage
    match /transactions/{transactionId} {
        allow read, write: if request.auth != null && request.resource.data.userId == request.auth.uid;
    }
    
    // Invoices: User-specific, only owner can manage
    match /invoices/{invoiceId} {
        allow read, write: if request.auth != null && request.resource.data.providerId == request.auth.uid;
    }
    
    // Network Connections: Participants can create, read, and delete
    match /network_connections/{connectionId} {
      allow read, delete: if request.auth != null && (request.resource.data.client_id == request.auth.uid || request.resource.data.provider_id == request.auth.uid);
      allow create: if request.auth != null;
    }
    
    // Credit Requests: User-specific for read/create, admin for update
    match /credit_requests/{requestId} {
        allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
        allow read, update: if request.auth != null && (request.resource.data.userId == request.auth.uid || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');
    }

    // Loans: User-specific for read, admin can manage
    match /loans/{loanId} {
        allow read, update: if request.auth != null && (request.resource.data.userId == request.auth.uid || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');
    }

    // P2P Transactions: Only sender can create
    match /p2p_transactions/{transactionId} {
        allow create: if request.auth != null && request.resource.data.senderUid == request.auth.uid;
        // Read access might be needed for auditing, but keep it restricted for now
        allow read: if request.auth != null && (request.resource.data.senderUid == request.auth.uid || request.resource.data.recipientUid == request.auth.uid);
    }
    
    // Investments: Any authenticated user can create, only participants see details
    match /investments/{investmentId} {
        allow create: if request.auth != null && request.resource.data.investorId == request.auth.uid;
        allow read: if request.auth != null; // Let's allow reading for now to show total investments. Can be restricted later.
    }
    
    // Fund: Only readable by users, only writable by admins
    match /fund/main {
      allow read: if request.auth != null;
      allow write: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
  }
}

rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    match /users/{userId} {
      allow read: if isAuthenticated();
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }
    
    match /services/{serviceId} {
      allow read: if isAuthenticated();
      allow create, update, delete: if isAuthenticated() && request.resource.data.providerId == request.auth.uid;
    }
    
    match /cases/{caseId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && request.resource.data.clientId == request.auth.uid;
      allow update: if isAuthenticated() && (isOwner(resource.data.clientId) || isOwner(resource.data.providerId));
    }
    
    match /cases/{caseId}/comments/{commentId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
    }
    
    match /courses/{courseId} {
      allow read: if isAuthenticated();
      allow create, update, delete: if isAuthenticated() && request.resource.data.providerId == request.auth.uid;
    }
    
    match /network_connections/{connectionId} {
      allow read: if isAuthenticated() && (request.auth.uid == resource.data.client_id || request.auth.uid == resource.data.provider_id);
      allow create: if isAuthenticated() && (request.auth.uid == request.resource.data.client_id || request.auth.uid == request.resource.data.provider_id);
      allow delete: if isAuthenticated() && (isOwner(resource.data.client_id) || isOwner(resource.data.provider_id));
    }
    
    match /transactions/{transactionId} {
      allow read, create, update, delete: if isAuthenticated() && isOwner(request.resource.data.userId);
    }
    
    match /credit_requests/{requestId} {
      allow read, create: if isAuthenticated() && isOwner(request.resource.data.userId);
      // Only admin can update status
      allow update: if isAdmin();
    }

    match /loans/{loanId} {
        allow read: if isAuthenticated() && isOwner(resource.data.userId);
        allow create: if isAdmin(); // Loans are created by the system/admin
        allow update: if isAuthenticated() && isOwner(resource.data.userId); // User can update status to 'paid'
    }

    match /fund/{fundDoc} {
        allow read: if isAuthenticated();
        allow write: if isAdmin(); // Only admins can modify the fund details
    }
  }
}

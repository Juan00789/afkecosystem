
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // By default, deny all reads and writes
    match /{document=**} {
      allow read, write: if false;
    }

    // Users can read public profiles, but only write to their own profile.
    match /users/{userId} {
      allow read: if request.auth != null;
      allow update: if request.auth.uid == userId;
      // Disallow client-side creation/deletion of user docs.
      // This should be handled server-side or upon auth creation.
      allow create, delete: if false;
    }
    
    // Services can be read by anyone, but only created/updated/deleted by the provider.
    match /services/{serviceId} {
      allow read: if true;
      allow create, update, delete: if request.auth.uid == request.resource.data.providerId;
    }

    // Cases can be created by the client.
    // They can be read/updated by the client or the provider involved.
    match /cases/{caseId} {
      allow create: if request.auth.uid == request.resource.data.clientId;
      allow read, update: if request.auth.uid == resource.data.clientId || request.auth.uid == resource.data.providerId;
      // Deletion might need more complex logic, disabled for now.
      allow delete: if false; 
    }

    // Comments can be created by authenticated users.
    // They can be read by anyone involved in the case.
    // They can only be updated/deleted by the original author.
    match /cases/{caseId}/comments/{commentId} {
      allow create: if request.auth.uid == request.resource.data.authorId;
      allow read: if get(/databases/$(database)/documents/cases/$(caseId)).data.clientId == request.auth.uid || get(/databases/$(database)/documents/cases/$(caseId)).data.providerId == request.auth.uid;
      allow update, delete: if request.auth.uid == resource.data.authorId;
    }
  }
}

rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // USERS: Can read their own profile, anyone can get public data, can only update/delete their own
    match /users/{userId} {
      allow get: if request.auth != null;
      allow list, update, delete: if request.auth.uid == userId;
      allow create: if request.auth != null;
      
      // PROVIDERS subcollection: Only the user can manage their own list of providers
      match /providers/{providerId} {
        allow read, write, delete: if request.auth.uid == userId;
      }
    }
    
    // CLIENTS: Can only be managed by the provider they are assigned to
    match /clients/{clientId} {
      allow read, write, delete: if request.auth.uid == resource.data.userId;
      allow list: if request.auth.uid == request.query.userId;
    }
    
    // SERVICES: Can only be managed by the provider who created them, anyone can read
    match /services/{serviceId} {
      allow read: if request.auth != null;
      allow write, delete: if request.auth.uid == request.resource.data.userId;
    }

    // CASES: Only the provider or client involved can read/write
    match /cases/{caseId} {
      allow read, update: if request.auth.uid == resource.data.providerId || request.auth.uid == resource.data.clientId;
      allow create: if request.auth.uid == request.resource.data.clientId;
      allow list: if request.auth.uid == request.query.clientId || request.auth.uid == request.query.providerId;

      // COMMENTS subcollection: Only the provider or client of the case can add/read comments
      match /comments/{commentId} {
        allow read, create: if request.auth.uid == get(/databases/$(database)/documents/cases/$(caseId)).data.providerId || request.auth.uid == get(/databases/$(database)/documents/cases/$(caseId)).data.clientId;
      }
    }
    
    // INVOICES: Only the provider or client involved can read
    match /invoices/{invoiceId} {
        allow read: if request.auth.uid == resource.data.providerId || request.auth.uid == resource.data.clientId;
        allow create: if request.auth.uid == request.resource.data.providerId;
        allow list: if request.auth.uid == request.query.clientId || request.auth.uid == request.query.providerId;
    }
    
  }
}

    

rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // USERS:
    // - Authenticated users can read any user profile (to get names, avatars, etc.)
    // - A user can only write to their own profile.
    match /users/{userId} {
      allow read: if request.auth != null;
      allow write: if request.auth.uid == userId;
    }

    // PROVIDERS (sub-collection of users):
    // - A user can manage their own list of providers (create, read, write, delete).
    match /users/{userId}/providers/{providerId} {
        allow read, write, delete: if request.auth.uid == userId;
    }

    // CLIENTS:
    // - CREATE: Any authenticated user can create a client document, but only for themselves as provider.
    // - READ: 
    //   - list: A provider can list their own clients.
    //   - get: A provider can get a specific client of theirs.
    // - WRITE/DELETE: A provider can only update/delete their own clients.
    match /clients/{clientId} {
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      allow list: if request.auth != null && request.query.where.get("userId") == request.auth.uid;
      allow get, update, delete: if request.auth != null && get(/databases/$(database)/documents/clients/$(clientId)).data.userId == request.auth.uid;
    }
    
    // SERVICES:
    // - CREATE: A provider can create a service for themselves.
    // - READ: Any authenticated user can read services. The app logic will filter which ones to show.
    // - WRITE/DELETE: A provider can only update/delete their own services.
    match /services/{serviceId} {
        allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
        allow read: if request.auth != null;
        allow update, delete: if request.auth != null && get(/databases/$(database)/documents/services/$(serviceId)).data.userId == request.auth.uid;
    }
    
    // CASES & COMMENTS:
    // A user can access a case and its comments if they are the provider (owner of the case)
    // or the client associated with the case.
    match /cases/{caseId} {
      allow read, write: if request.auth != null && (
                           resource.data.providerId == request.auth.uid ||
                           resource.data.clientId == request.auth.uid
                         );

      match /comments/{commentId} {
        allow read, create: if request.auth != null && (
                              get(/databases/$(database)/documents/cases/$(caseId)).data.providerId == request.auth.uid ||
                              get(/databases/$(database)/documents/cases/$(caseId)).data.clientId == request.auth.uid
                            );
        // Add rule for update/delete if needed, e.g., only the comment author can edit/delete.
        allow update, delete: if request.auth != null && resource.data.userId == request.auth.uid;
      }
    }

  }
}

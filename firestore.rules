
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    match /users/{userId} {
      allow get: if request.auth != null;
      allow list, update, delete: if request.auth != null && request.auth.uid == userId;
      allow create: if request.auth != null;
      
      match /providers/{providerId} {
       allow read, write, create, delete: if request.auth != null && request.auth.uid == userId;
      }
    }
    match /clients/{clientId} {
      allow read, write: if request.auth != null && request.auth.uid == resource.data.userId;
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
      allow list: if request.auth != null && request.auth.uid == request.query.userId;
    }
    match /services/{serviceId} {
      allow read: if request.auth != null;
      allow create, update, delete: if request.auth != null && request.auth.uid == request.resource.data.userId;
    }
    match /cases/{caseId} {
        allow create: if request.auth != null && request.auth.uid == request.resource.data.clientId;
        allow read, update: if request.auth != null && (request.auth.uid == resource.data.clientId || request.auth.uid == resource.data.providerId);
        
        match /comments/{commentId} {
            allow create: if request.auth != null;
            allow read: if request.auth != null && (exists(/databases/$(database)/documents/cases/$(caseId)) && (request.auth.uid == get(/databases/$(database)/documents/cases/$(caseId)).data.clientId || request.auth.uid == get(/databases/$(database)/documents/cases/$(caseId)).data.providerId));
        }
    }
  }
}

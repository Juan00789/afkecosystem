rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Users can read any profile, but only write to their own.
    match /users/{userId} {
      allow read: if request.auth != null;
      allow update, delete: if request.auth.uid == userId;
      allow create: if request.auth.uid == userId;
    }

    // Allow logged-in users to create network connections.
    // Reading/deleting connections will be handled by cloud functions for security.
    match /network_connections/{connectionId} {
      allow create: if request.auth != null;
      allow read, update, delete: if false; // Secure access through backend logic
    }
    
    // Services can be read by anyone, but only created/edited by the provider.
    match /services/{serviceId} {
      allow read: if true;
      allow create, update, delete: if request.auth.uid == resource.data.providerId;
    }

    // Products can be read by anyone, but only managed by the provider.
    match /products/{productId} {
      allow read: if true;
      allow create, update, delete: if request.auth.uid == resource.data.providerId;
    }

    // Cases can be read by participants, but only created by authenticated users.
    match /cases/{caseId} {
      allow read, update: if request.auth.uid == resource.data.clientId || request.auth.uid == resource.data.providerId;
      allow create: if request.auth != null;
    }
    
    // Comments can be read by case participants, and created by authenticated users.
    match /cases/{caseId}/comments/{commentId} {
      allow read: if get(/databases/$(database)/documents/cases/$(caseId)).data.clientId == request.auth.uid || get(/databases/$(database)/documents/cases/$(caseId)).data.providerId == request.auth.uid;
      allow create: if request.auth.uid == request.resource.data.authorId;
    }

    // Transactions can only be accessed by the user who owns them.
    match /transactions/{transactionId} {
      allow read, write: if request.auth.uid == resource.data.userId;
    }

    // Invoices can only be accessed by the provider who created them.
    match /invoices/{invoiceId} {
        allow read, write: if request.auth.uid == resource.data.providerId;
    }

    // Courses can be read by anyone, but only managed by the provider.
    match /courses/{courseId} {
        allow read: if true;
        allow create, update, delete: if request.auth.uid == resource.data.providerId;
    }

    // Credit requests can only be managed by the user or an admin.
    match /credit_requests/{requestId} {
        allow read, write: if request.auth.uid == resource.data.userId || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Fund can only be read/written by admins.
    match /fund/{fundId} {
      allow read, write: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    // Investments can only be created by authenticated users.
    match /investments/{investmentId} {
      allow create: if request.auth != null;
      allow read: if request.auth.uid == resource.data.investorId;
    }

    // P2P transactions can be created by authenticated users.
     match /p2p_transactions/{transactionId} {
      allow create: if request.auth != null;
      allow read: if request.auth.uid == resource.data.senderUid || request.auth.uid == resource.data.recipientUid;
    }
  }
}

rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Users: Can read public profiles, but only write to their own.
    match /users/{userId} {
      allow read: if true;
      allow write: if request.auth != null && request.auth.uid == userId;
    }

    // Cases: Only the client or provider can read/write.
    match /cases/{caseId} {
      allow read, update: if request.auth != null && (request.auth.uid == resource.data.clientId || request.auth.uid == resource.data.providerId);
      allow create: if request.auth != null;
      
      // Comments within a case
      match /comments/{commentId} {
        allow read, create: if request.auth != null && (request.auth.uid == get(/databases/$(database)/documents/cases/$(caseId)).data.clientId || request.auth.uid == get(/databases/$(database)/documents/cases/$(caseId)).data.providerId);
      }
    }
    
    // Services: Everyone can read, only the provider can write.
    match /services/{serviceId} {
      allow read: if true;
      allow create, update, delete: if request.auth != null && request.auth.uid == request.resource.data.providerId;
    }

    // Courses: Everyone can read, only the provider can write.
    match /courses/{courseId} {
        allow read: if true;
        allow create: if request.auth != null && request.auth.uid == request.resource.data.providerId;
        allow update, delete: if request.auth != null && request.auth.uid == resource.data.providerId;
    }
    
    // Credit Requests: Only the user who created it can access it.
    match /credit_requests/{requestId} {
      allow read, create: if request.auth != null && request.auth.uid == request.resource.data.userId;
      // No updates allowed from client side for security.
    }
  }
}
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is part of a case
    function isCaseParticipant(caseId) {
      let caseData = get(/databases/$(database)/documents/cases/$(caseId)).data;
      return request.auth.uid == caseData.clientId || request.auth.uid == caseData.providerId;
    }

    // Users can only manage their own profile.
    // Public profiles are readable by any authenticated user.
    match /users/{userId} {
      allow read, list: if request.auth != null;
      allow create: if request.auth.uid == userId;
      // Allow update if user is the owner and is only changing allowed fields.
      allow update: if request.auth.uid == userId &&
                       request.resource.data.uid == resource.data.uid &&
                       request.resource.data.email == resource.data.email &&
                       request.resource.data.diff(resource.data).affectedKeys()
                         .hasOnly(['displayName', 'phoneNumber', 'companyName', 'website', 'photoURL', 'bankInfo', 'network', 'credits']);
      allow delete: if false; // Deleting users is not allowed via client
    }

    // Services are public to authenticated users (for the marketplace),
    // but only the provider can manage them.
    match /services/{serviceId} {
        allow read: if request.auth != null;
        allow create: if request.auth != null && request.auth.uid == request.resource.data.providerId;
        allow update: if request.auth != null && request.auth.uid == resource.data.providerId;
        allow delete: if request.auth != null && request.auth.uid == resource.data.providerId;
    }

    // Courses are public to authenticated users, but only the provider can manage them.
    match /courses/{courseId} {
        allow read: if request.auth != null;
        allow create: if request.auth != null && request.auth.uid == request.resource.data.providerId;
        allow update: if request.auth != null && request.auth.uid == resource.data.providerId;
        allow delete: if request.auth != null && request.auth.uid == resource.data.providerId;
    }
    

    // Cases can only be accessed or modified by the client or provider involved.
    match /cases/{caseId} {
      allow read, update: if isCaseParticipant(caseId);
      // A user can only create a case where they are the client.
      allow create: if request.auth != null && request.auth.uid == request.resource.data.clientId;
      allow delete: if false; // Cases should be marked as "cancelled" instead
      
      // Comments follow the parent case's permissions.
      match /comments/{commentId} {
        allow read: if isCaseParticipant(caseId);
        // A participant can create a comment if they are the author.
        allow create: if isCaseParticipant(caseId) && request.auth.uid == request.resource.data.authorId;
        allow update, delete: if false;
      }
    }
  }
}
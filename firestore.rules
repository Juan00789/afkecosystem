
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Users can read public profiles, but only update their own.
    match /users/{userId} {
      allow read;
      allow write: if request.auth != null && request.auth.uid == userId;
    }

    // Cases are visible only to the client and provider involved.
    match /cases/{caseId} {
      allow read, update: if request.auth != null && (request.auth.uid == resource.data.clientId || request.auth.uid == resource.data.providerId);
      allow create: if request.auth != null && request.auth.uid == request.resource.data.clientId;
      
      // Comments are visible to client and provider, but can only be created by them.
      match /comments/{commentId} {
        allow read: if request.auth != null && (exists(/databases/$(database)/documents/cases/$(caseId)) && (request.auth.uid == get(/databases/$(database)/documents/cases/$(caseId)).data.clientId || request.auth.uid == get(/databases/$(database)/documents/cases/$(caseId)).data.providerId));
        allow create: if request.auth != null && request.auth.uid == request.resource.data.authorId;
      }
    }

    // Services can be read by anyone, but only created/updated/deleted by the provider.
    match /services/{serviceId} {
      allow read;
      allow create: if request.auth != null && request.auth.uid == request.resource.data.providerId;
      allow update, delete: if request.auth != null && request.auth.uid == resource.data.providerId;
    }

    // Courses can be read by anyone, but only managed by the creator.
    match /courses/{courseId} {
      allow read;
      allow create: if request.auth != null && request.auth.uid == request.resource.data.providerId;
      allow update, delete: if request.auth != null && request.auth.uid == resource.data.providerId;
    }

    // Credit requests are private to the user who created them.
    match /credit_requests/{requestId} {
      allow read, create: if request.auth != null && request.auth.uid == request.resource.data.userId;
    }
  }
}

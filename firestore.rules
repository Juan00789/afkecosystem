
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if the user is the owner of a document by a given field
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    // Helper function to check if user is part of a network connection
    function isInNetwork(connectionId) {
        let connection = get(/databases/$(database)/documents/network_connections/$(connectionId)).data;
        return isOwner(connection.client_id) || isOwner(connection.provider_id);
    }

    // Users can read any profile, but only write to their own, except for network updates.
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
    }
    
    // Network connections can be created by any authenticated user, as long as they are part of it.
    // They can only be deleted by the participants.
    match /network_connections/{connectionId} {
        allow read: if isAuthenticated() && (isOwner(resource.data.client_id) || isOwner(resource.data.provider_id));
        allow create: if isAuthenticated() && (isOwner(request.resource.data.client_id) || isOwner(request.resource.data.provider_id));
        allow delete: if isAuthenticated() && (isOwner(resource.data.client_id) || isOwner(resource.data.provider_id));
    }

    // Services are public to read, but only the provider can manage them.
    match /services/{serviceId} {
      allow read: if true;
      allow create: if isAuthenticated() && isOwner(request.resource.data.providerId);
      allow update, delete: if isAuthenticated() && isOwner(resource.data.providerId);
    }
    
    // Courses are public to read, but only the provider can manage them.
    match /courses/{courseId} {
       allow read: if true;
       allow create: if isAuthenticated() && isOwner(request.resource.data.providerId);
       allow update, delete: if isAuthenticated() && isOwner(resource.data.providerId);
    }

    // Cases can only be accessed by the client or the provider involved.
    match /cases/{caseId} {
      allow read, update: if isAuthenticated() && (isOwner(resource.data.clientId) || isOwner(resource.data.providerId));
      allow create: if isAuthenticated() && isOwner(request.resource.data.clientId);
      
      // Comments follow the same rule as the parent case.
      match /comments/{commentId} {
        allow read, create: if isAuthenticated() && (isOwner(get(/databases/$(database)/documents/cases/$(caseId)).data.clientId) || isOwner(get(/databases/$(database)/documents/cases/$(caseId)).data.providerId));
      }
    }
    
    // Credit requests can only be accessed by the user who created them.
    match /credit_requests/{requestId} {
      allow read: if isAuthenticated() && isOwner(resource.data.userId);
      allow create: if isAuthenticated() && isOwner(request.resource.data.userId);
    }
    
    // Transactions can only be accessed by the user who created them.
    match /transactions/{transactionId} {
        allow read, create, delete, update: if isAuthenticated() && isOwner(request.auth.uid);
    }
  }
}


      
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Users can read their own profile, and any user can read public profiles.
    // Users can only write to their own profile.
    match /users/{userId} {
      allow read: if true;
      allow write: if request.auth.uid == userId;
    }

    // Services can be read by anyone.
    // Only the provider who owns the service can create, update, or delete it.
    match /services/{serviceId} {
      allow read: if true;
      allow create, update, delete: if request.auth.uid == request.resource.data.providerId;
    }
    
    // Cases can only be read by the client or provider involved.
    // A case can be created by the client.
    // A case can be updated by either the client or provider.
    match /cases/{caseId} {
      allow read: if request.auth.uid == resource.data.clientId || request.auth.uid == resource.data.providerId;
      allow create: if request.auth.uid == request.resource.data.clientId;
      allow update: if request.auth.uid == resource.data.clientId || request.auth.uid == resource.data.providerId;

      // Comments can be created by the client or provider of the case.
      // Comments can be read by the client or provider of the case.
      match /comments/{commentId} {
        allow read: if get(/databases/$(database)/documents/cases/$(caseId)).data.clientId == request.auth.uid || get(/databases/$(database)/documents/cases/$(caseId)).data.providerId == request.auth.uid;
        allow create: if request.auth.uid == get(/databases/$(database)/documents/cases/$(caseId)).data.clientId || request.auth.uid == get(/databases/$(database)/documents/cases/$(caseId)).data.providerId;
      }

      // Investments can be read by any authenticated user.
      // Investments can only be created by authenticated users who are not the client or provider of the case.
      match /investments/{investmentId} {
        allow read: if request.auth != null;
        allow create: if request.auth != null && request.auth.uid != get(/databases/$(database)/documents/cases/$(caseId)).data.clientId && request.auth.uid != get(/databases/$(database)/documents/cases/$(caseId)).data.providerId;
        allow update, delete: if false; // Investments are immutable
      }
    }
    
    // Network connections can only be managed by the involved users.
    // This rule is simplified; a more robust one might check for existing connections.
    match /network_connections/{connectionId} {
      allow read: if request.auth.uid == resource.data.client_id || request.auth.uid == resource.data.provider_id;
      allow create: if request.auth.uid == request.resource.data.client_id || request.auth.uid == request.resource.data.provider_id;
      allow delete: if request.auth.uid == resource.data.client_id || request.auth.uid == resource.data.provider_id;
    }

    // Courses can be read by anyone.
    // Courses can only be created/updated/deleted by the provider.
    match /courses/{courseId} {
      allow read: if true;
      allow create, update, delete: if request.auth.uid == request.resource.data.providerId;
    }

    // Credit requests can only be created and read by the user who made them.
    // Admins can read/update them.
    match /credit_requests/{requestId} {
      allow create: if request.auth.uid == request.resource.data.userId;
      allow read: if request.auth.uid == resource.data.userId || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
      allow update: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Loans can only be read by the user who owns them or an admin.
    // Admins can update them (e.g., mark as paid).
    match /loans/{loanId} {
       allow read, update: if request.auth.uid == resource.data.userId || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
       allow create: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    // The main fund can only be read and updated by an admin.
    match /fund/main {
      allow read, write: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // P2P transactions can be created by any authenticated user.
    // They can only be read by the sender or receiver.
    match /p2p_transactions/{transactionId} {
      allow create: if request.auth != null && request.auth.uid == request.resource.data.senderUid;
      allow read: if request.auth.uid == resource.data.senderUid || request.auth.uid == resource.data.recipientUid;
      allow update, delete: if false; // Transactions are immutable
    }

  }
}
      
    
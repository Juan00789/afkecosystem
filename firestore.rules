rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is an admin
    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Users can read anyone's profile, but only edit their own.
    // Critical fields like 'credits' and 'role' are protected.
    match /users/{userId} {
      allow read;
      allow create: if request.auth.uid == userId;
      allow update: if request.auth.uid == userId &&
                       request.resource.data.credits == resource.data.credits &&
                       request.resource.data.role == resource.data.role;
    }

    // Services can be read by anyone, but only created/edited by the provider.
    match /services/{serviceId} {
      allow read;
      allow create: if request.auth.uid == request.resource.data.providerId;
      allow update, delete: if request.auth.uid == resource.data.providerId;
    }
    
    // Products can be read by anyone, but only managed by the provider.
    match /products/{productId} {
      allow read;
      allow create: if request.auth.uid == request.resource.data.providerId;
      allow update, delete: if request.auth.uid == resource.data.providerId;
    }

    // Courses can be read by anyone, but managed only by the provider or an admin.
    match /courses/{courseId} {
      allow read;
      allow create: if request.auth.uid == request.resource.data.providerId;
      allow update: if request.auth.uid == resource.data.providerId || isAdmin();
      allow delete: if isAdmin();
    }

    // Cases can only be accessed by the client or provider involved.
    match /cases/{caseId} {
      allow read, update: if request.auth.uid == resource.data.clientId || request.auth.uid == resource.data.providerId;
      allow create: if request.auth.uid == request.resource.data.clientId;
      
      // Comments can only be added by participants of the case.
      match /comments/{commentId} {
        allow read, create: if request.auth.uid == get(/databases/$(database)/documents/cases/$(caseId)).data.clientId ||
                               request.auth.uid == get(/databases/$(database)/documents/cases/$(caseId)).data.providerId;
      }
    }

    // Network connections can only be created by the client in the relationship.
    match /network_connections/{connectionId} {
        allow read: if request.auth.uid == resource.data.client_id || request.auth.uid == resource.data.provider_id;
        allow create: if request.auth.uid == request.resource.data.client_id;
        allow delete: if request.auth.uid == resource.data.client_id || request.auth.uid == resource.data.provider_id;
    }

    // Financial documents (transactions, invoices) are private.
    match /transactions/{transactionId} {
      allow read, create, update, delete: if request.auth.uid == resource.data.userId;
    }
    
    match /invoices/{invoiceId} {
      allow read, create, update, delete: if request.auth.uid == resource.data.providerId;
    }
    
    // Credit system: Requests, Loans, Investments
    match /credit_requests/{requestId} {
      allow create: if request.auth.uid == request.resource.data.userId;
      allow read: if request.auth.uid == resource.data.userId || isAdmin();
      allow update: if isAdmin(); // Only admins can approve/reject
    }

    match /loans/{loanId} {
      allow read, update: if request.auth.uid == resource.data.userId || isAdmin();
    }

    match /investments/{investmentId} {
        allow create: if request.auth.uid == request.resource.data.investorId;
        allow read: if request.auth.uid == resource.data.investorId || isAdmin();
    }
    
    // Fund can only be read/updated by an admin.
    match /fund/main {
      allow read, update: if isAdmin();
    }
  }
}

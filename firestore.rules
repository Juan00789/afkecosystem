
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    match /users/{userId} {
      // Users can read any profile (to see provider names, etc.)
      allow read: if request.auth != null;
      // Users can only create and update their own profile
      allow create, update: if request.auth.uid == userId;
    }
    
    // Rules for clients, who are associated with providers.
    match /clients/{clientId} {
      // A provider can create a client record.
      allow create: if request.auth.uid == request.resource.data.providerId;
      // A provider can read, update, or delete their own client records.
      allow get, update, delete: if request.auth.uid == resource.data.providerId;
      // A provider can list the clients associated with them.
      allow list: if request.auth.uid == request.query.get("where.providerId");
    }

    // Rules for the subcollection where a client's providers are stored.
    match /users/{userId}/providers/{providerDocId} {
        allow read, create, delete, update: if request.auth.uid == userId;
    }

    // Rules for services offered by users (acting as providers).
    match /services/{serviceId} {
        // Any authenticated user can read service details.
        allow read: if request.auth != null;
        // A user can only create, update, or delete their own services.
        allow create, update, delete: if request.auth.uid == request.resource.data.userId;
    }

    // Rules for cases, which link a client and a provider.
    match /cases/{caseId} {
        // A client or provider can get or update their own case.
        allow get, update: if request.auth.uid == resource.data.clientId || request.auth.uid == resource.data.providerId;
        // A client or provider can create a case.
        allow create: if request.auth.uid == request.resource.data.clientId || request.auth.uid == request.resource.data.providerId;
        // A user can list cases where they are either the client or the provider.
        allow list: if request.auth.uid == request.query.get("where.clientId") || request.auth.uid == request.query.get("where.providerId");
        
        // Comments are a subcollection of cases.
        match /comments/{commentId} {
            // The client or provider associated with the case can read and create comments.
            allow read, create: if get(/databases/$(database)/documents/cases/$(caseId)).data.clientId == request.auth.uid || get(/databases/$(database)/documents/cases/$(caseId)).data.providerId == request.auth.uid;
        }
    }
    
    // Rules for invoices, linked to a case.
    match /invoices/{invoiceId} {
        // The client or provider can get a specific invoice.
        allow get: if request.auth.uid == resource.data.clientId || request.auth.uid == resource.data.providerId;
        // The client or provider can create an invoice.
        allow create: if request.auth.uid == request.resource.data.clientId || request.auth.uid == request.resource.data.providerId;
         // A user can list invoices where they are either the client or the provider.
        allow list: if request.auth.uid == request.query.get("where.clientId") || request.auth.uid == request.query.get("where.providerId");
    }

  }
}

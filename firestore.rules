
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }
    
    function isParticipant(caseId) {
      let caseResource = get(/databases/$(database)/documents/cases/$(caseId));
      return isOwner(caseResource.data.clientId) || isOwner(caseResource.data.providerId);
    }

    match /users/{userId} {
      allow read;
      allow create: if isOwner(userId);
      
      // Allow users to update their own profile, but protect sensitive fields.
      allow update: if isOwner(userId)
                    && request.resource.data.uid == resource.data.uid
                    && request.resource.data.email == resource.data.email
                    && request.resource.data.credits == resource.data.credits
                    && request.resource.data.role == resource.data.role;
    }
    
    match /cases/{caseId} {
      allow read, update: if isParticipant(caseId);
      allow create: if isOwner(request.resource.data.clientId);
    }
    
    match /cases/{caseId}/comments/{commentId} {
      allow read: if isParticipant(caseId);
      allow create: if isOwner(request.resource.data.authorId);
    }
    
    match /services/{serviceId} {
      allow read;
      allow create, update, delete: if isOwner(request.resource.data.providerId);
    }
    
     match /products/{productId} {
      allow read;
      allow create, update, delete: if isOwner(request.resource.data.providerId);
    }
    
    match /courses/{courseId} {
        allow read;
        allow create, update, delete: if isOwner(request.resource.data.providerId);
    }
    
    match /network_connections/{connectionId} {
      allow read: if isOwner(resource.data.client_id) || isOwner(resource.data.provider_id);
      allow create: if isOwner(request.resource.data.client_id);
      allow delete: if isOwner(resource.data.client_id) || isOwner(resource.data.provider_id);
    }

    match /transactions/{transactionId} {
      allow read, create, update: if isOwner(request.resource.data.userId);
    }

    match /invoices/{invoiceId} {
      allow read, create: if isOwner(request.resource.data.providerId);
    }
    
    match /credit_requests/{requestId} {
      allow read: if isOwner(resource.data.userId) || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
      allow create: if isOwner(request.resource.data.userId);
      // Only admins can update status
      allow update: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    match /loans/{loanId} {
      allow read: if isOwner(resource.data.userId) || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
       allow update: if isOwner(resource.data.userId) || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    match /investments/{investmentId} {
        allow read: if request.auth != null;
        allow create: if isOwner(request.resource.data.investorId);
    }

    // Admin-only collection for managing the fund
    match /fund/{fundId} {
      allow read: if request.auth != null;
      allow write: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
  }
}

rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is part of a case
    function isCaseParticipant(caseId) {
      let caseData = get(/databases/$(database)/documents/cases/$(caseId)).data;
      return request.auth.uid == caseData.clientId || request.auth.uid == caseData.providerId;
    }

    // Users can only manage their own profile.
    // Public profiles are readable by any authenticated user.
    match /users/{userId} {
      allow read, list: if true;
      allow create: if request.auth.uid == userId;
      // Allow update only if it's the user's own profile.
      // Credits can only go below zero if the profile is incomplete (lacks a companyName).
      // A user cannot give themselves credits.
      allow update: if request.auth.uid == userId &&
                       (request.resource.data.credits >= 0 || (request.resource.data.companyName == null || request.resource.data.companyName == "")) &&
                       request.resource.data.credits <= resource.data.credits;
      allow delete: if false; // Deleting users is not allowed via client
    }

    // Services are public to authenticated users (for the marketplace),
    // but only the provider can manage them.
    match /services/{serviceId} {
        allow read: if request.auth != null;
        allow create: if request.auth.uid == request.resource.data.providerId;
        allow update: if request.auth.uid == resource.data.providerId;
        allow delete: if request.auth.uid == resource.data.providerId;
    }

    // Cases can only be accessed or modified by the client or provider involved.
    match /cases/{caseId} {
      allow read, update: if isCaseParticipant(caseId);
      // A user can only create a case where they are the client.
      allow create: if request.auth.uid == request.resource.data.clientId;
      allow delete: if false; // Cases should be marked as "cancelled" instead
      
      // Comments follow the parent case's permissions.
      match /comments/{commentId} {
        allow read: if isCaseParticipant(caseId);
        // A participant can create a comment if they are the author.
        allow create: if isCaseParticipant(caseId) && request.auth.uid == request.resource.data.authorId;
        allow update, delete: if false;
      }
    }

    // Credit requests can only be created and read by the user themselves.
    // Status updates should be handled by a backend process.
    match /credit_requests/{requestId} {
      allow read: if request.auth.uid == resource.data.userId;
      allow create: if request.auth.uid == request.resource.data.userId;
      allow update, delete: if false;
    }

    // Courses are public to authenticated users,
    // but only the provider can manage them.
     match /courses/{courseId} {
        allow read: if request.auth != null;
        allow create: if request.auth.uid == request.resource.data.providerId;
        allow update: if request.auth.uid == resource.data.providerId;
        allow delete: if request.auth.uid == resource.data.providerId;
    }
  }
}

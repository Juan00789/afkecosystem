
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Users can manage their own profile.
    match /users/{userId} {
      allow read, create: if true;
      allow update, delete: if request.auth.uid == userId;

      // Users can manage their own list of providers.
      match /providers/{providerId} {
        allow read, create, delete, list: if request.auth.uid == userId;
      }
    }

    // Providers can manage their own clients.
    match /clients/{clientId} {
      allow read, write: if request.auth.uid == resource.data.providerId;
    }

    // Providers can manage their own services.
    match /services/{serviceId} {
      allow read: if true;
      allow write: if request.auth.uid == resource.data.userId;
    }

    // Cases can be read by either the client or the provider.
    // Cases can only be created by clients (implicitly via services page).
    // Cases can be updated by either party.
    // Cases can only be deleted by the provider.
    match /cases/{caseId} {
      allow get, list, update: if request.auth.uid == resource.data.clientId || request.auth.uid == resource.data.providerId;
      allow create: if request.auth.uid == request.resource.data.clientId;
      allow delete: if request.auth.uid == resource.data.providerId;
      
      // Comments can be created by either client or provider.
      // Comments can be read by either party.
      match /comments/{commentId} {
        allow create, read, list: if request.auth.uid == resource.data.clientId || request.auth.uid == resource.data.providerId;
      }
    }

    // Invoices can be read by either party.
    // Invoices can only be created/managed by providers.
    match /invoices/{invoiceId} {
       allow get, list: if request.auth.uid == resource.data.clientId || request.auth.uid == resource.data.providerId;
       allow write: if request.auth.uid == resource.data.providerId;
    }
  }
}

rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Users: Public profiles can be read, but only owners can write.
    match /users/{userId} {
      allow get, list: if true;
      allow create: if request.auth.uid != null;
      allow update, delete: if request.auth.uid == userId;

      // Providers subcollection for clients
      match /providers/{providerDocId} {
        allow read, write: if request.auth.uid == userId;
      }
    }

    // Services: Publicly readable catalog, but only owners can write.
    match /services/{serviceId} {
      allow get, list: if true;
      allow create: if request.auth.uid == request.resource.data.userId;
      allow update, delete: if request.auth.uid == resource.data.userId;
    }

    // Clients: Only the linked provider can manage their client list.
    match /clients/{clientId} {
      allow read, create, update, delete: if request.auth.uid == request.resource.data.providerId;
      allow list: if request.auth.uid != null;
    }
    
    // Cases: Only participants of the case can read or write.
    match /cases/{caseId} {
      allow read: if request.auth.uid == resource.data.clientId || request.auth.uid == resource.data.providerId;
      allow create: if request.auth.uid == request.resource.data.clientId || request.auth.uid == request.resource.data.providerId;
      allow update: if request.auth.uid == resource.data.clientId || request.auth.uid == resource.data.providerId;
      allow delete: if request.auth.uid == resource.data.clientId || request.auth.uid == resource.data.providerId;
      allow list: if request.auth.uid != null;

      // Comments within a case
      match /comments/{commentId} {
         allow read, create: if request.auth.uid == resource.data.clientId || request.auth.uid == resource.data.providerId;
      }
    }
    
    // Invoices: Only participants of the invoice can read or write.
     match /invoices/{invoiceId} {
      allow read, list: if request.auth.uid == resource.data.clientId || request.auth.uid == resource.data.providerId;
      allow create, update, delete: if request.auth.uid == request.resource.data.providerId;
    }
  }
}

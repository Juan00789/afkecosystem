
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Users collection rules
    match /users/{userId} {
      // Any authenticated user can read public user profiles
      allow list, read: if request.auth.uid != null;
      
      // A user can create their own profile
      allow create: if request.auth.uid == userId;

      // A user can only update their own profile
      allow update: if request.auth.uid == userId;

      // A user can delete their own profile (optional)
      allow delete: if request.auth.uid == userId;
      
      // Rules for the 'providers' subcollection
      match /providers/{providerDocId} {
        // A user can only manage their own list of providers
        allow read, write, delete: if request.auth.uid == userId;
      }
    }

    // Clients collection rules
    match /clients/{clientId} {
      // Only the authenticated provider can perform operations
      allow read, write, delete: if request.auth.uid == resource.data.providerId;
      // Allow any authenticated user to list clients for discovery purposes
      allow list: if request.auth.uid != null;
      // Allow a provider to create a client for themselves
      allow create: if request.auth.uid == request.resource.data.providerId;
    }

    // Services collection rules
    match /services/{serviceId} {
       // Anyone can list services (for public discovery)
      allow list: if true;
      // A provider can only read their own services
      allow read: if request.auth.uid == resource.data.userId || request.auth.uid != null;
      // A provider can create a service for themselves
      allow create: if request.auth.uid == request.resource.data.userId;
      // A provider can only update their own services
      allow update, delete: if request.auth.uid == resource.data.userId;
    }
    
    // Cases collection rules
    match /cases/{caseId} {
      // Client or Provider can read the case details
      allow read, update: if request.auth.uid == resource.data.clientId || request.auth.uid == resource.data.providerId;
      // Allow deleting a case if the user is involved
      allow delete: if request.auth.uid == resource.data.clientId || request.auth.uid == resource.data.providerId;
      // Allow creating a case if the user is the client OR the provider, and status is 'Pendiente'
      allow create: if (request.auth.uid == request.resource.data.clientId || request.auth.uid == request.resource.data.providerId) && request.resource.data.status == 'Pendiente';
      // Allow listing cases for involved users
      allow list: if request.auth.uid != null;

      // Comments subcollection
      match /comments/{commentId} {
        // Allow creating a comment if the user is part of the case
        allow create: if request.auth.uid == request.resource.data.clientId || request.auth.uid == request.resource.data.providerId;
        // Allow reading comments if the user is part of the case
        allow list, read: if request.auth.uid == resource.data.clientId || request.auth.uid == resource.data.providerId;
      }
    }

    // Invoices collection rules
    match /invoices/{invoiceId} {
        // Client or Provider can manage the invoice
        allow read, write, delete: if request.auth.uid == resource.data.clientId || request.auth.uid == resource.data.providerId;
        allow list: if request.auth.uid != null;
        allow create: if request.auth.uid == request.resource.data.providerId;
    }
  }
}

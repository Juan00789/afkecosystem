rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Users collection:
    // read: Anyone can read public user profiles.
    // update: Users can only update their own profile.
    // create: Allow user creation (handled by backend/auth triggers).
    // list: Allow authenticated users to query the user list (e.g., to find providers by phone).
    match /users/{userId} {
      allow read: if request.auth.uid != null;
      allow update: if request.auth.uid == userId;
      allow create;
      allow list: if request.auth.uid != null;

      // Providers subcollection for a client
      // A client can manage their own list of providers.
      match /providers/{providerId} {
        allow read, write: if request.auth.uid == userId;
      }
    }

    // Clients collection (for providers):
    // read, write: Only the associated provider can manage their client list.
    // list: Allow authenticated users to query clients (needed for hidden game logic).
    match /clients/{clientId} {
      allow read, write: if request.auth.uid == resource.data.providerId;
      allow list: if request.auth.uid != null;
    }

    // Services collection:
    // read, update, delete: Only the provider who owns the service can manage it.
    // create: A provider can create a service for themselves.
    // list: Allow authenticated users to query services (needed for client to explore services).
    match /services/{serviceId} {
      allow read, update, delete: if request.auth.uid == resource.data.userId;
      allow create: if request.auth.uid == request.resource.data.userId;
      allow list: if request.auth.uid != null;
    }
    
    // Invoices collection:
    // read: Only the client or provider involved in the invoice can read it.
    // write: Only the provider can create/update invoices.
    match /invoices/{invoiceId} {
      allow read: if request.auth.uid == resource.data.clientId || request.auth.uid == resource.data.providerId;
      allow write: if request.auth.uid == resource.data.providerId;
    }

    // Cases collection:
    // read: Only the client or provider involved in the case can read it.
    // create: The client or provider can create a case.
    // update: Only the client or provider involved can update the case.
    match /cases/{caseId} {
      allow read, update: if request.auth.uid == resource.data.clientId || request.auth.uid == resource.data.providerId;
      allow create: if (request.auth.uid == request.resource.data.clientId || request.auth.uid == request.resource.data.providerId);

      // Comments subcollection:
      // read: Anyone involved in the case can read comments.
      // create: Anyone involved in the case can create comments.
      match /comments/{commentId} {
        allow read: if get(/databases/$(database)/documents/cases/$(caseId)).data.clientId == request.auth.uid || get(/databases/$(database)/documents/cases/$(caseId)).data.providerId == request.auth.uid;
        allow create: if (request.auth.uid == request.resource.data.clientId || request.auth.uid == request.resource.data.providerId) && request.auth.uid == request.resource.data.userId;
      }
    }
  }
}

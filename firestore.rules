
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check ownership
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // USERS
    match /users/{userId} {
      allow read;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);

      // PROVIDERS (subcollection of users, for clients)
      match /providers/{providerId} {
        allow read, create, update, delete: if isOwner(userId);
      }
    }

    // CLIENTS (for providers)
    match /clients/{clientId} {
      allow read, create, update, delete: if request.auth.uid == resource.data.providerId;
    }

    // SERVICES
    match /services/{serviceId} {
      allow read;
      allow create, update, delete: if request.auth.uid == request.resource.data.userId;
    }
    
    // INVOICES
    match /invoices/{invoiceId} {
      allow read, create, update: if request.auth.uid == resource.data.clientId || request.auth.uid == resource.data.providerId;
    }

    // CASES
    match /cases/{caseId} {
      allow read, delete: if request.auth.uid == resource.data.clientId || request.auth.uid == resource.data.providerId;
      allow create: if request.auth.uid == request.resource.data.clientId || request.auth.uid == request.resource.data.providerId;
      allow update: if request.auth.uid == resource.data.clientId || request.auth.uid == resource.data.providerId;
      
      // COMMENTS (subcollection of cases)
      match /comments/{commentId} {
        allow read: if request.auth.uid == get(/databases/$(database)/documents/cases/$(caseId)).data.clientId || request.auth.uid == get(/databases/$(database)/documents/cases/$(caseId)).data.providerId;
        allow create: if request.auth.uid != null && (request.auth.uid == get(/databases/$(database)/documents/cases/$(caseId)).data.clientId || request.auth.uid == get(/databases/$(database)/documents/cases/$(caseId)).data.providerId);
      }
    }
  }
}

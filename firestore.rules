rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Users can read and write their own profile data.
    match /users/{userId} {
      allow get, update, delete: if request.auth.uid == userId;
      allow create: if request.auth.uid != null;
    }

    // A user can manage their own clients.
    match /clients/{clientId} {
        allow read, create, update, delete: if request.auth.uid == request.resource.data.userId;
    }
    
    // A user can manage their own services.
    match /services/{serviceId} {
        allow read, create, update, delete: if request.auth.uid == request.resource.data.userId;
    }
    
    // Complex rules for cases and comments
    match /cases/{caseId} {
        // The provider can do anything. The assigned client can only read.
        allow read, update, delete: if get(/databases/$(database)/documents/cases/$(caseId)).data.providerId == request.auth.uid;
        allow create: if request.auth.uid == request.resource.data.providerId;
        
        // Client access rule
        allow get: if get(/databases/$(database)/documents/cases/$(caseId)).data.clientId == request.auth.uid;

        // Nested comments rules
        match /comments/{commentId} {
            // Both the provider and the assigned client can read comments.
            allow read: if 
                request.auth.uid == get(/databases/$(database)/documents/cases/$(caseId)).data.providerId ||
                request.auth.uid == get(/databases/$(database)/documents/cases/$(caseId)).data.clientId;
                
            // Anyone authenticated (provider or client) can create a comment.
            // The logic in the app should determine if they are part of the case.
            allow create: if request.auth.uid != null;
        }
    }
  }
}


rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if the user is the owner of a document
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // Users can read any profile, but can only write to their own
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow write: if isOwner(userId);
    }
    
    // Services can be read by anyone, but only created/modified by the owner
    match /services/{serviceId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && request.resource.data.providerId == request.auth.uid;
      allow update, delete: if isAuthenticated() && resource.data.providerId == request.auth.uid;
    }

    // Products can be read by anyone, but only created/modified by the owner
    match /products/{productId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && request.resource.data.providerId == request.auth.uid;
      allow update, delete: if isAuthenticated() && resource.data.providerId == request.auth.uid;
    }

    // Cases can be read by participants, created by anyone authenticated
    match /cases/{caseId} {
      allow get: if isAuthenticated() && (resource.data.clientId == request.auth.uid || resource.data.providerId == request.auth.uid);
      allow list: if isAuthenticated(); // For dashboard views
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && (resource.data.clientId == request.auth.uid || resource.data.providerId == request.auth.uid);
      
      // Comments can be added by participants
      match /comments/{commentId} {
        allow read, create: if isAuthenticated() && (get(/databases/$(database)/documents/cases/$(caseId)).data.clientId == request.auth.uid || get(/databases/$(database)/documents/cases/$(caseId)).data.providerId == request.auth.uid);
      }
    }

    // Network connections can be read by participants, and created by the client
    match /network_connections/{connectionId} {
      allow read: if isAuthenticated() && (resource.data.client_id == request.auth.uid || resource.data.provider_id == request.auth.uid);
      allow create: if isAuthenticated() && request.resource.data.client_id == request.auth.uid;
      allow delete: if isAuthenticated() && (resource.data.client_id == request.auth.uid || resource.data.provider_id == request.auth.uid);
    }
    
    // Invoices can only be managed by the provider who created them
    match /invoices/{invoiceId} {
        allow read, write: if isAuthenticated() && resource.data.providerId == request.auth.uid;
        allow create: if isAuthenticated() && request.resource.data.providerId == request.auth.uid;
    }

    // Transactions can only be managed by the user who created them
    match /transactions/{transactionId} {
        allow read, write, delete: if isAuthenticated() && resource.data.userId == request.auth.uid;
        allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
    }
    
    // Credit requests can be read by the user or an admin, created by the user, and updated by an admin
    match /credit_requests/{requestId} {
        allow read: if isAuthenticated() && (resource.data.userId == request.auth.uid || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');
        allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
        allow update: if isAuthenticated() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    // Courses can be read by anyone authenticated, and managed by the provider
    match /courses/{courseId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && request.resource.data.providerId == request.auth.uid;
      allow update, delete: if isAuthenticated() && resource.data.providerId == request.auth.uid;
    }
    
    // Fund can only be read/written by an admin
    match /fund/{fundId} {
        allow read, write: if isAuthenticated() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Loans can be read by the user or an admin, and updated by an admin
    match /loans/{loanId} {
        allow read: if isAuthenticated() && (resource.data.userId == request.auth.uid || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');
        allow update: if isAuthenticated() && (resource.data.userId == request.auth.uid || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');
    }
    
    // Investments can be created by any authenticated user, and read by participants or investor.
    match /investments/{investmentId} {
        allow read: if isAuthenticated(); // Simplified for now
        allow create: if isAuthenticated() && request.resource.data.investorId == request.auth.uid;
    }

    // P2P transactions can be created by the sender
     match /p2p_transactions/{transactionId} {
      allow create: if isAuthenticated() && request.resource.data.senderUid == request.auth.uid;
      allow read: if isAuthenticated() && (resource.data.senderUid == request.auth.uid || resource.data.recipientUid == request.auth.uid);
    }
  }
}

rules_version = '2';

service firebase.storage {
  match /b/{bucket}/o {
    
    // Helper function for auth check
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check ownership based on UID in filename
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    // Avatars: Public read, but only owner can write/delete.
    // Filename format: {userId}.{extension}
    match /avatars/{userIdWithExt} {
      allow read: if true;
      allow write: if isAuthenticated() && isOwner(userIdWithExt.split('.')[0]);
    }
    
    // Course Covers: Public read, but only authenticated users can write.
    // We assume the providerId is checked at the Firestore level before generating an upload URL.
    match /course-covers/{fileName} {
      allow read: if true;
      allow write: if isAuthenticated();
    }

    // Default deny all other paths
    match /{allPaths=**} {
      allow read, write: if false;
    }
  }
}
